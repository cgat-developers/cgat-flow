"""===========================
Pipeline template
===========================

.. Replace the documentation below with your own description of the
   pipeline's purpose

Overview
========

This pipeline computes the word frequencies in the configuration
files :file:``pipeline.yml` and :file:`conf.py`.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use cgat pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.
cgatReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.yml` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_@template@.py config

Input files
-----------

None required except the pipeline configuration files.

Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

Pipeline output
===============

.. Describe output files of the pipeline here

Glossary
========

.. glossary::


Code
====

"""
from ruffus import *
import sys
import os
import glob
import cgatcore.experiment as E
from cgatcore import pipeline as P


# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline.yml" % os.path.splitext(__file__)[0],
     "../pipeline.yml",
     "pipeline.yml"])

NPUT_FORMATS = ("*.fastq.1.gz", "*.fastq.gz", "*.sra", "*.csfasta.gz")
REGEX_FORMATS = regex(r"(\S+).(fastq.1.gz|fastq.gz|sra|csfasta.gz)")

matches = glob.glob("*.fastq.1.gz") + glob.glob(
    "*.fastq.gz") + glob.glob("*.sra") + glob.glob("*.csfasta.gz")

PICARD_MEMORY = PARAMS["picard_memory"]
GATK_MEMORY = PARAMS["gatk_memory"]
ANNOTATION_MEMORY = PARAMS["annotation_memory"]

PANELS = glob.glob("*.panel.tsv")

FILTERS = glob.glob ("*.filter.tsv")


# ---------------------------------------------------
# Specific pipeline tasks
@mkdir("results.dir")
@transform(("/ceph/project/talbotlab/jscaber/nanopore/"),
           regex("(.*)"),
           r"/ceph/project/talbotlab/jscaber/nanopore/results.dir")
def nextflowEpi2me(infolder, outfile):
    '''count the number of words in the pipeline configuration files.'''

    genome_file = os.path.abspath(
        os.path.join(PARAMS["genome_dir"], PARAMS["genome"] + ".fa"))
    target_regions = PARAMS["targets"]

    # the command line statement we want to execute
    statement = '''nextflow run epi2me-labs/wf-cas9
        --fastq %(infolder)s 
        --ref_genome %(genome_file)s
        --targets %(target_regions)s 
        --out_dir %(outfile)s
        --full_report -profile singularity
    
    '''
    P.run(statement)


@mkdir("last.dir")
@transform(("nextflow/fastq_pass/fastq_pass_ontarget.fastq"),
           regex("(.*)"),
           r"last.dir/fastq_pass_on_target.par")
def lastTrain(infile, outfile):
    '''count the number of words in the pipeline configuration files.'''

    genome_file = os.path.abspath(
        os.path.join(PARAMS["genome_dir"], PARAMS["genome"] + ".fa"))
    last_index = PARAMS["LAST_index"]

    # the command line statement we want to execute
    statement = '''last-train
        -P10 -Q0 %(last_index)s %(infile)s > %(outfile)s
    '''
    P.run(statement)

@mkdir("last.dir")
@transform(lastTrain,
           regex("(.*).par"),
           add_inputs(r"nextflow/fastq_pass/fastq_pass_ontarget.fastq"),
           r"\1.maf")
def lastAl(infiles, outfile):
    '''count the number of words in the pipeline configuration files.'''

    infile1,infile2 = infiles
    genome_file = os.path.abspath(
        os.path.join(PARAMS["genome_dir"], PARAMS["genome"] + ".fa"))
    last_index = PARAMS["LAST_index"]

    # the command line statement we want to execute
    statement = '''lastal -P10 --split -p 
        %(infile1)s %(last_index)s %(infile2)s > %(outfile)s
    '''
    P.run(statement)


@transform(lastAl,
           regex("(.*).maf"),
           r"\1.txt")
def tandemGenotypes(infile, outfile):
    '''count the number of words in the pipeline configuration files.'''

    genome_file = os.path.abspath(
        os.path.join(PARAMS["genome_dir"], PARAMS["genome"] + ".fa"))
    last_index = PARAMS["LAST_index"]
    repeat_mask = PARAMS["repeat_mask"]


    # the command line statement we want to execute
    statement = '''tandem-genotypes -g target_regions.bed %(repeat_mask)s %(infile)s > %(outfile)s
    '''
    P.run(statement)

# ---------------------------------------------------
# Generic pipeline tasks
@follows(nextflowEpi2me)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
